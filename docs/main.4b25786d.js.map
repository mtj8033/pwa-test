{"version":3,"sources":["setupServiceWorker.js","node_modules/idb/build/esm/chunk.js","node_modules/idb/build/esm/index.js","node_modules/idb/build/esm/async-iterators.js","node_modules/idb/with-async-ittr.js","node_modules/escape-html/index.js","setupIndexedDB.js","main.js"],"names":["setupServiceWorker","navigator","deferredPrompt","window","addEventListener","serviceWorker","register","then","registration","console","log","catch","error","installButton","document","querySelector","e","preventDefault","matchMedia","matches","classList","toggle","prompt","userChoice","choiceResult","outcome","instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","prototype","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","Promise","resolve","reject","unlisten","removeEventListener","success","wrap","result","value","set","cacheDonePromiseForTransaction","tx","has","done","complete","idbProxyTraps","get","target","prop","receiver","objectStoreNames","undefined","objectStore","addTraps","callback","wrapFunction","func","transaction","includes","args","apply","unwrap","storeNames","call","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","name","version","blocked","upgrade","blocking","indexedDB","open","openPromise","event","oldVersion","newVersion","db","deleteDB","deleteDatabase","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","storeName","store","index","shift","returnVal","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator","dbPromise","setupIndexedDB","addNewTodoElement","todoListElement","headers","Headers","baseRestUrl","todosOS","contains","createObjectStore","createIndex","unique","deleteIndex","handleAddTodo","trim","getId","id","todo","userId","title","completed","localKey","saved","fetch","body","JSON","stringify","response","json","updateUI","updateTodoInLocal","writeTodoToLocal","count","localCount","add","put","todos","forEach","existing","remove","todoToAdd","insertAdjacentHTML","parentElement","style","display","handleRemoveTodo","todoElement","Number","getAttribute","removeChild","children","length","readTodos","startId","readLocalTodosFromIndexedDB","localTasks","push","replaceTodosWithLatestState","onLine","readTodosFromIndexedDB","clear","todosFromLocal","key","todosFromStore"],"mappings":"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","file":"main.4b25786d.js","sourceRoot":"..","sourcesContent":["export function setupServiceWorker() {\r\n  // Check that service worker api is available\r\n  if (\"serviceWorker\" in navigator) {\r\n    // Use the window load event to keep the page load performant\r\n    window.addEventListener(\"load\", () => {\r\n      navigator.serviceWorker.register(\"sw.js\").then((registration) => {\r\n        console.log(\"Registration succeeded\");\r\n      })\r\n        .catch(error => {\r\n          console.log(\"Registration failed with error\", error);\r\n        });\r\n    });\r\n\r\n    let deferredPrompt;\r\n    const installButton = document.querySelector(\".installButton\");\r\n    window.addEventListener('beforeinstallprompt', (e) => {\r\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n      e.preventDefault();\r\n      console.log(\"before install event received\");\r\n      // Stash the event so it can be triggered later.\r\n\r\n      if (!window.matchMedia('(display-mode: standalone)').matches) {\r\n        deferredPrompt = e;\r\n        installButton.classList.toggle(\"is-visible\");\r\n      }\r\n    });\r\n\r\n    installButton.addEventListener('click', (e) => {\r\n      // hide our user interface that shows our A2HS button\r\n      installButton.classList.toggle(\"is-visible\");\r\n      // Show the prompt\r\n      deferredPrompt.prompt();\r\n      // Wait for the user to respond to the prompt\r\n      deferredPrompt.userChoice\r\n        .then((choiceResult) => {\r\n          if (choiceResult.outcome === 'accepted') {\r\n            console.log('User accepted the A2HS prompt');\r\n            deferredPrompt = null;\r\n          } else {\r\n            console.log('User dismissed the A2HS prompt');\r\n          }\r\n        });\r\n    });\r\n  }\r\n}\r\n","const instanceOfAny = (object, constructors) => constructors.some(c => object instanceof c);\n\nlet idbProxyableTypes;\r\nlet cursorAdvanceMethods;\r\n// This is a function to prevent it throwing up in node environments.\r\nfunction getIdbProxyableTypes() {\r\n    return idbProxyableTypes ||\r\n        (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);\r\n}\r\n// This is a function to prevent it throwing up in node environments.\r\nfunction getCursorAdvanceMethods() {\r\n    return cursorAdvanceMethods || (cursorAdvanceMethods = [\r\n        IDBCursor.prototype.advance,\r\n        IDBCursor.prototype.continue,\r\n        IDBCursor.prototype.continuePrimaryKey,\r\n    ]);\r\n}\r\nconst cursorRequestMap = new WeakMap();\r\nconst transactionDoneMap = new WeakMap();\r\nconst transactionStoreNamesMap = new WeakMap();\r\nconst transformCache = new WeakMap();\r\nconst reverseTransformCache = new WeakMap();\r\nfunction promisifyRequest(request) {\r\n    const promise = new Promise((resolve, reject) => {\r\n        const unlisten = () => {\r\n            request.removeEventListener('success', success);\r\n            request.removeEventListener('error', error);\r\n        };\r\n        const success = () => {\r\n            resolve(wrap(request.result));\r\n            unlisten();\r\n        };\r\n        const error = () => {\r\n            reject(request.error);\r\n            unlisten();\r\n        };\r\n        request.addEventListener('success', success);\r\n        request.addEventListener('error', error);\r\n    });\r\n    promise.then((value) => {\r\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\r\n        // (see wrapFunction).\r\n        if (value instanceof IDBCursor) {\r\n            cursorRequestMap.set(value, request);\r\n        }\r\n    });\r\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\r\n    // is because we create many promises from a single IDBRequest.\r\n    reverseTransformCache.set(promise, request);\r\n    return promise;\r\n}\r\nfunction cacheDonePromiseForTransaction(tx) {\r\n    // Early bail if we've already created a done promise for this transaction.\r\n    if (transactionDoneMap.has(tx))\r\n        return;\r\n    const done = new Promise((resolve, reject) => {\r\n        const unlisten = () => {\r\n            tx.removeEventListener('complete', complete);\r\n            tx.removeEventListener('error', error);\r\n            tx.removeEventListener('abort', error);\r\n        };\r\n        const complete = () => {\r\n            resolve();\r\n            unlisten();\r\n        };\r\n        const error = () => {\r\n            reject(tx.error);\r\n            unlisten();\r\n        };\r\n        tx.addEventListener('complete', complete);\r\n        tx.addEventListener('error', error);\r\n        tx.addEventListener('abort', error);\r\n    });\r\n    // Cache it for later retrieval.\r\n    transactionDoneMap.set(tx, done);\r\n}\r\nlet idbProxyTraps = {\r\n    get(target, prop, receiver) {\r\n        if (target instanceof IDBTransaction) {\r\n            // Special handling for transaction.done.\r\n            if (prop === 'done')\r\n                return transactionDoneMap.get(target);\r\n            // Polyfill for objectStoreNames because of Edge.\r\n            if (prop === 'objectStoreNames') {\r\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\r\n            }\r\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\r\n            if (prop === 'store') {\r\n                return receiver.objectStoreNames[1] ?\r\n                    undefined : receiver.objectStore(receiver.objectStoreNames[0]);\r\n            }\r\n        }\r\n        // Else transform whatever we get back.\r\n        return wrap(target[prop]);\r\n    },\r\n    has(target, prop) {\r\n        if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store'))\r\n            return true;\r\n        return prop in target;\r\n    },\r\n};\r\nfunction addTraps(callback) {\r\n    idbProxyTraps = callback(idbProxyTraps);\r\n}\r\nfunction wrapFunction(func) {\r\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\r\n    // only create one new func per func.\r\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\r\n    if (func === IDBDatabase.prototype.transaction &&\r\n        !('objectStoreNames' in IDBTransaction.prototype)) {\r\n        return function (storeNames, ...args) {\r\n            const tx = func.call(unwrap(this), storeNames, ...args);\r\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\r\n            return wrap(tx);\r\n        };\r\n    }\r\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\r\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\r\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\r\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\r\n    // undefined if the end of the cursor has been reached.\r\n    if (getCursorAdvanceMethods().includes(func)) {\r\n        return function (...args) {\r\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\r\n            // the original object.\r\n            func.apply(unwrap(this), args);\r\n            return wrap(cursorRequestMap.get(this));\r\n        };\r\n    }\r\n    return function (...args) {\r\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\r\n        // the original object.\r\n        return wrap(func.apply(unwrap(this), args));\r\n    };\r\n}\r\nfunction transformCachableValue(value) {\r\n    if (typeof value === 'function')\r\n        return wrapFunction(value);\r\n    // This doesn't return, it just creates a 'done' promise for the transaction,\r\n    // which is later returned for transaction.done (see idbObjectHandler).\r\n    if (value instanceof IDBTransaction)\r\n        cacheDonePromiseForTransaction(value);\r\n    if (instanceOfAny(value, getIdbProxyableTypes()))\r\n        return new Proxy(value, idbProxyTraps);\r\n    // Return the same value back if we're not going to transform it.\r\n    return value;\r\n}\r\nfunction wrap(value) {\r\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\r\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\r\n    if (value instanceof IDBRequest)\r\n        return promisifyRequest(value);\r\n    // If we've already transformed this value before, reuse the transformed value.\r\n    // This is faster, but it also provides object equality.\r\n    if (transformCache.has(value))\r\n        return transformCache.get(value);\r\n    const newValue = transformCachableValue(value);\r\n    // Not all types are transformed.\r\n    // These may be primitive types, so they can't be WeakMap keys.\r\n    if (newValue !== value) {\r\n        transformCache.set(value, newValue);\r\n        reverseTransformCache.set(newValue, value);\r\n    }\r\n    return newValue;\r\n}\r\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { wrap as a, addTraps as b, instanceOfAny as c, reverseTransformCache as d, unwrap as e };\n","import { a as wrap, b as addTraps } from './chunk.js';\nexport { e as unwrap, a as wrap } from './chunk.js';\n\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\r\nfunction openDB(name, version, { blocked, upgrade, blocking } = {}) {\r\n    const request = indexedDB.open(name, version);\r\n    const openPromise = wrap(request);\r\n    if (upgrade) {\r\n        request.addEventListener('upgradeneeded', (event) => {\r\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\r\n        });\r\n    }\r\n    if (blocked)\r\n        request.addEventListener('blocked', () => blocked());\r\n    if (blocking)\r\n        openPromise.then(db => db.addEventListener('versionchange', blocking));\r\n    return openPromise;\r\n}\r\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\r\nfunction deleteDB(name, { blocked } = {}) {\r\n    const request = indexedDB.deleteDatabase(name);\r\n    if (blocked)\r\n        request.addEventListener('blocked', () => blocked());\r\n    return wrap(request).then(() => undefined);\r\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\r\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\r\nconst cachedMethods = new Map();\r\nfunction getMethod(target, prop) {\r\n    if (!(target instanceof IDBDatabase &&\r\n        !(prop in target) &&\r\n        typeof prop === 'string'))\r\n        return;\r\n    if (cachedMethods.get(prop))\r\n        return cachedMethods.get(prop);\r\n    const targetFuncName = prop.replace(/FromIndex$/, '');\r\n    const useIndex = prop !== targetFuncName;\r\n    const isWrite = writeMethods.includes(targetFuncName);\r\n    if (\r\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\r\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\r\n        !(isWrite || readMethods.includes(targetFuncName)))\r\n        return;\r\n    const method = async function (storeName, ...args) {\r\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\r\n        let target = tx.store;\r\n        if (useIndex)\r\n            target = target.index(args.shift());\r\n        const returnVal = target[targetFuncName](...args);\r\n        if (isWrite)\r\n            await tx.done;\r\n        return returnVal;\r\n    };\r\n    cachedMethods.set(prop, method);\r\n    return method;\r\n}\r\naddTraps(oldTraps => ({\r\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\r\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\r\n}));\n\nexport { openDB, deleteDB };\n","import { b as addTraps, c as instanceOfAny, d as reverseTransformCache, e as unwrap } from './chunk.js';\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\r\nconst methodMap = {};\r\nconst advanceResults = new WeakMap();\r\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\r\nconst cursorIteratorTraps = {\r\n    get(target, prop) {\r\n        if (!advanceMethodProps.includes(prop))\r\n            return target[prop];\r\n        let cachedFunc = methodMap[prop];\r\n        if (!cachedFunc) {\r\n            cachedFunc = methodMap[prop] = function (...args) {\r\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\r\n            };\r\n        }\r\n        return cachedFunc;\r\n    },\r\n};\r\nasync function* iterate(...args) {\r\n    // tslint:disable-next-line:no-this-assignment\r\n    let cursor = this;\r\n    if (!(cursor instanceof IDBCursor)) {\r\n        cursor = await cursor.openCursor(...args);\r\n    }\r\n    if (!cursor)\r\n        return;\r\n    cursor = cursor;\r\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\r\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\r\n    // Map this double-proxy back to the original, so other cursor methods work.\r\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\r\n    while (cursor) {\r\n        yield proxiedCursor;\r\n        // If one of the advancing methods was not called, call continue().\r\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\r\n        advanceResults.delete(proxiedCursor);\r\n    }\r\n}\r\nfunction isIteratorProp(target, prop) {\r\n    return (prop === Symbol.asyncIterator &&\r\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) || (prop === 'iterate' &&\r\n        instanceOfAny(target, [IDBIndex, IDBObjectStore]));\r\n}\r\naddTraps(oldTraps => ({\r\n    get(target, prop, receiver) {\r\n        if (isIteratorProp(target, prop))\r\n            return iterate;\r\n        return oldTraps.get(target, prop, receiver);\r\n    },\r\n    has(target, prop) {\r\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\r\n    },\r\n}));\n","export * from './build/esm/index.js';\nimport './build/esm/async-iterators.js';\n","/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module variables.\n * @private\n */\n\nvar matchHtmlRegExp = /[\"'&<>]/;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = escapeHtml;\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {string} string The string to escape for inserting into HTML\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index = 0;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34: // \"\n        escape = '&quot;';\n        break;\n      case 38: // &\n        escape = '&amp;';\n        break;\n      case 39: // '\n        escape = '&#39;';\n        break;\n      case 60: // <\n        escape = '&lt;';\n        break;\n      case 62: // >\n        escape = '&gt;';\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index\n    ? html + str.substring(lastIndex, index)\n    : html;\n}\n","import { openDB, deleteDB } from \"idb/with-async-ittr\";\r\nimport escapeHTML from \"escape-html\";\r\n\r\nconst dbPromise = setupIndexedDB();\r\nconst addNewTodoElement = document.querySelector(\".new-todo\");\r\nconst todoListElement = document.querySelector(\".todo-list\");\r\nconst headers = new Headers({ 'Content-Type': 'application/json; charset=UTF-8' });\r\nconst baseRestUrl = \"//jsonplaceholder.typicode.com/todos\";\r\n\r\nhandleAddTodo();\r\nhandleRemoveTodo();\r\nreadTodos();\r\n\r\nexport function setupIndexedDB() {\r\n    //check for support of indexeddb\r\n    if ((\"indexedDB\" in window)) {\r\n        return openDB(\"pwa-test-db\", 4, {\r\n            upgrade(db, oldVersion, newVersion, tx) {\r\n                console.log(oldVersion, newVersion);\r\n                let todosOS;\r\n                if (!db.objectStoreNames.contains(\"todos\")) {\r\n                    todosOS = db.createObjectStore(\"todos\");\r\n                } else {\r\n                    todosOS = tx.objectStore(\"todos\");\r\n                }\r\n                if (oldVersion < 2) {\r\n                    todosOS.createIndex(\"localKey\", \"localKey\", { unique: true });\r\n                }\r\n                if (oldVersion < 3) {\r\n                    todosOS.createIndex(\"idLocal\", [\"id\", \"localKey\"], { unique: true });\r\n                }\r\n                if (oldVersion < 4) {\r\n                    todosOS.deleteIndex(\"idLocal\");\r\n                }\r\n\r\n            },\r\n        });\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nfunction handleAddTodo() {\r\n    /** \r\n     * Add flow:\r\n     * 1a. Attempt to add to server\r\n     *      a. If successful, update in indexed with the updated info (primary key)\r\n     *      b. if unsuccessful and offline, notify user it was unsuccessful and they are working offline - display todo from indexeddb\r\n     * 1b. Store it in indexeddb\r\n     * \r\n     */\r\n    addNewTodoElement.addEventListener(\"change\", async ({ target }) => {\r\n        const value = target.value.trim();\r\n        addNewTodoElement.value = \"\";\r\n        console.log(\"adding todo?\", value);\r\n\r\n        getId().then(id => {\r\n\r\n            let todo = {\r\n                userId: 1,\r\n                title: value,\r\n                completed: false,\r\n                localKey: id,\r\n                saved: false\r\n            };\r\n\r\n            fetch(baseRestUrl, {\r\n                method: 'POST',\r\n                body: JSON.stringify(todo),\r\n                headers: headers\r\n            })\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    json.saved = true;\r\n                    updateUI([json], id);\r\n                    updateTodoInLocal(json, id);\r\n                    // })\r\n                    // .catch(reason => {\r\n                    //     if (!navigator.onLine) {\r\n                    //         console.log(\"offline so loading from indexeddb\");\r\n                    //          todo]);\r\n                    //     }\r\n                    //     throw reason;\r\n\r\n                });\r\n            //always write to local just in case\r\n            updateUI([todo]);\r\n            writeTodoToLocal(todo, id);\r\n        });\r\n    });\r\n}\r\n\r\nasync function getId() {\r\n    let db = await dbPromise;\r\n    let tx = db.transaction(\"todos\");\r\n    let localCount = await tx.store.index(\"localKey\").count();\r\n    return 200 + localCount + 1;\r\n}\r\n\r\nasync function writeTodoToLocal(todo, id) {\r\n    let db = await dbPromise;\r\n    let tx = db.transaction(\"todos\", \"readwrite\");\r\n    let store = tx.objectStore(\"todos\");\r\n    store.add(todo, id);\r\n    await tx.done;\r\n    console.log(\"Added a todo to the store\", id);\r\n}\r\n\r\nasync function updateTodoInLocal(todo, id) {\r\n    let db = await dbPromise;\r\n    let tx = db.transaction(\"todos\", \"readwrite\");\r\n    let store = tx.objectStore(\"todos\");\r\n    store.put(todo, id);\r\n    await tx.done;\r\n    console.log(\"Added a todo to the store\", id);\r\n}\r\n\r\nfunction updateUI(todos, id) {\r\n    todos.forEach(todo => {\r\n        if (id) {\r\n            const existing = document.querySelector(`li[data-id=\"${id}\"]`);\r\n            if (existing) {\r\n                existing.remove();\r\n            }\r\n        }\r\n        const todoToAdd =\r\n            `<li data-id=\"${id ? id : todo.localKey ? todo.localKey : todo.id}\" ${todo.completed ? ' class=\"completed\"' : \"\"}>\r\n                <input class=\"toggle\" type=\"checkbox\" ${todo.completed ? \"checked\" : \"\"}>\r\n                <label>${escapeHTML(todo.title)}</label>\r\n                <span ${todo.saved ? ' class=\"saved\"' : todo.localKey ? ' class=\"local\"' : \"\"}></span>\r\n                <button class=\"destroy\"></button>\r\n            </li>`;\r\n        todoListElement.insertAdjacentHTML(\"afterbegin\", todoToAdd);\r\n    });\r\n    todoListElement.parentElement.style.display = \"block\";\r\n}\r\n\r\nfunction handleRemoveTodo() {\r\n    /** \r\n     * Remove Flow:\r\n     * 1a. Attempt to remove from server\r\n     *      a. if successful, ?\r\n     *      b. if unsuccessful and offline, notify user\r\n     * 1b. Remove it in indexeddb\r\n     */\r\n    todoListElement.addEventListener(\"click\", async ({ target }) => {\r\n        if (target.classList.contains(\"destroy\")) {\r\n            const todoElement = target.parentElement;\r\n            let db = await dbPromise;\r\n            let tx = db.transaction(\"todos\", \"readwrite\");\r\n            let store = tx.objectStore(\"todos\");\r\n            let deleted = await store.delete(Number(todoElement.getAttribute(\"data-id\")));\r\n            todoListElement.removeChild(todoElement);\r\n            if (todoListElement.children.length === 0) {\r\n                todoListElement.parentElement.style.display = \"none\";\r\n            }\r\n\r\n            await tx.done;\r\n            console.log(\"deleted a todo from the store\");\r\n        }\r\n    });\r\n}\r\n\r\nasync function readTodos() {\r\n    let startId = await getId();\r\n    /**\r\n     * Load flow:\r\n     * 1. Attempt to load from network\r\n     *      1a. If successful then store into indexeddb and display\r\n     *      1b. if unsuccessful and offline then retrieve from indexeddb and display, note to user that they are working offline\r\n     */\r\n    /** \r\n     * Load flow:\r\n     * \r\n     * 1. Read local from indexeddb (wouldn't do this if you had a real backend api to call/save)\r\n     * 2. Read all non-local from rest call\r\n     *      2a. Fallback to indexeddb for non-local\r\n     */\r\n    try {\r\n        let response = await fetch(baseRestUrl, {\r\n            method: 'GET',\r\n            headers: headers\r\n        });\r\n        let json = await response.json();\r\n        updateUI(json);\r\n        let localTasks = await readLocalTodosFromIndexedDB();\r\n        json.push(...localTasks);\r\n        replaceTodosWithLatestState(json, startId);\r\n    } catch (reason) {\r\n        if (!navigator.onLine) {\r\n            console.log(\"offline so loading from indexeddb\");\r\n            readTodosFromIndexedDB();\r\n        }\r\n        throw reason;\r\n    }\r\n\r\n}\r\n\r\nasync function replaceTodosWithLatestState(todos, startId) {\r\n    let db = await dbPromise;\r\n    let tx = db.transaction(\"todos\", \"readwrite\");\r\n    let store = tx.objectStore(\"todos\");\r\n    await store.clear();\r\n    for (const todo of todos) {\r\n        let id = todo.localKey ? todo.localKey : todo.id;\r\n        if (!id) {\r\n            id = ++startId;\r\n        }\r\n        store.add(todo, id);\r\n    }\r\n    return tx.done;\r\n}\r\n\r\nasync function readLocalTodosFromIndexedDB() {\r\n    let todosFromLocal = [];\r\n    let db = await dbPromise;\r\n    const tx = db.transaction(\"todos\");\r\n    for await (const cursor of tx.store.index(\"localKey\")) {\r\n        let todo = cursor.value;\r\n        if (!todo.id) {\r\n            todo.localKey = cursor.key;\r\n        }\r\n        todosFromLocal.push(todo);\r\n    }\r\n    updateUI(todosFromLocal);\r\n    return todosFromLocal;\r\n}\r\n\r\nasync function readTodosFromIndexedDB() {\r\n    let db = await dbPromise;\r\n    const tx = db.transaction(\"todos\");\r\n    let todosFromStore = [];\r\n    for await (const cursor of tx.store) {\r\n        let todo = cursor.value;\r\n        if (!todo.id) {\r\n            todo.localKey = cursor.key;\r\n        }\r\n        todosFromStore.push(todo);\r\n    }\r\n    debugger;\r\n\r\n    await tx.done;\r\n    console.log(\"done\");\r\n    if (todosFromStore.length !== 0) {\r\n        updateUI(todosFromStore);\r\n    }\r\n}","import { setupServiceWorker } from \"./setupServiceWorker\";\r\nimport { setupIndexedDB } from \"./setupIndexedDB\";\r\n\r\nsetupServiceWorker();\r\nsetupIndexedDB();"]}